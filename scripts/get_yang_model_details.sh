#!/usr/bin/env bash

# @meta version 1.0.0
# @meta author "@umatare5"
# @describe Get detailed information about a specific YANG model

# @option -c --controller <HOST>       WNC controller hostname or IP (required unless WNC_CONTROLLER set)
# @option -t --token <TOKEN>          Basic auth token (or use WNC_ACCESS_TOKEN env var)
# @option -p --protocol <PROTOCOL>    Protocol: http or https [default: https] [choices: http,https]
# @option -f --format <FORMAT>        Output format: json or xml [default: json] [choices: json,xml]
# @option -r --revision <REVISION>    YANG model revision (YYYY-MM-DD) [default: 2023-08-01]
# @option -m --model <MODEL>          YANG model name to retrieve details for (required)
# @flag   -k --insecure               Skip TLS certificate verification
# @flag   -v --verbose                Enable verbose output
# @flag   -R --raw                    Output raw response without formatting
# @flag      --no-color               Disable colored output

set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly SCRIPT_DIR

# Source bootstrap library
source "${SCRIPT_DIR}/lib/bootstrap.sh"

# Initialize libraries and load YANG module
init_wnc_libraries "${SCRIPT_DIR}/lib/get_yang_model_details"

# Validate required CLI tools
validate_required_cli_tools "strict"

# Entrypoint: fetch YANG model details
main() {
    # shellcheck disable=SC2154  # argc variables are generated by argc
    local model_name="${argc_model}"
    local controller="${argc_controller:-${WNC_CONTROLLER:-}}"
    local token="${argc_token:-${WNC_ACCESS_TOKEN:-}}"
    local protocol="${argc_protocol:-https}"
    local insecure="${argc_insecure:-false}"
    local revision="${argc_revision:-2023-08-01}"
    local format="${argc_format:-json}"
    local raw="${argc_raw:-false}"

    run_yang_get_model_operation "${model_name}" "$controller" "$token" \
        "$protocol" "$insecure" "$revision" "$format" "$raw"
}

eval "$(argc --argc-eval "$0" "$@")"
